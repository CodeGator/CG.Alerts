{
  "api/CG.Alerts.AlertEventBase.html": {
    "href": "api/CG.Alerts.AlertEventBase.html",
    "title": "Class AlertEventBase",
    "keywords": "Class AlertEventBase This class is a base for all alert type events. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase AuditAlert CriticalErrorAlert ErrorAlert InformationAlert WarningAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) CG.Events.Models.EventBase.OnInvoke(System.Object[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public abstract class AlertEventBase : EventBase Examples Here is an example of deriving a custom alert type from the AlertEventBase class: public class MyAlert : AlertEventBase { }"
  },
  "api/CG.Alerts.AlertOptions.html": {
    "href": "api/CG.Alerts.AlertOptions.html",
    "title": "Class AlertOptions",
    "keywords": "Class AlertOptions This class contains options for the IAlertService service. Inheritance System.Object AlertOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class AlertOptions Constructors AlertOptions() This constructor creates a new instance of the AlertOptions class. Declaration public AlertOptions() Methods AddCustomAlertType<TEvent>() This method may be called to add a custom alert event type for the service to manage. Declaration public void AddCustomAlertType<TEvent>() where TEvent : AlertEventBase Type Parameters Name Description TEvent The type of alert event to use. SetAuditAlertType<TEvent>() This method may be called to override the default alert event type to use for audit alerts. Declaration public void SetAuditAlertType<TEvent>() where TEvent : AuditAlert Type Parameters Name Description TEvent The type of alert event to use for audit alerts. SetCriticalErrorAlertType<TEvent>() This method may be called to override the default alert event type to use for critical error alerts. Declaration public void SetCriticalErrorAlertType<TEvent>() where TEvent : CriticalErrorAlert Type Parameters Name Description TEvent The type of alert event to use for critical error alerts. SetErrorAlertType<TEvent>() This method may be called to override the default alert event type to use for error alerts. Declaration public void SetErrorAlertType<TEvent>() where TEvent : ErrorAlert Type Parameters Name Description TEvent The type of alert event to use for error alerts. SetInformationAlertType<TEvent>() This method may be called to override the default alert event type to use for information alerts. Declaration public void SetInformationAlertType<TEvent>() where TEvent : InformationAlert Type Parameters Name Description TEvent The type of alert event to use for information alerts. SetWarningAlertType<TEvent>() This method may be called to override the default alert event type to use for warning alerts. Declaration public void SetWarningAlertType<TEvent>() where TEvent : WarningAlert Type Parameters Name Description TEvent The type of alert event to use for warning alerts."
  },
  "api/CG.Alerts.AlertService.html": {
    "href": "api/CG.Alerts.AlertService.html",
    "title": "Class AlertService",
    "keywords": "Class AlertService This class is a default implementation of the IAlertService interface. Inheritance System.Object AlertService Implements IAlertService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class AlertService : IAlertService Constructors AlertService(IOptions<AlertOptions>, IEventAggregator, ILogger<AlertService>) This constructor creates a new instance of the AlertService class. Declaration public AlertService(IOptions<AlertOptions> options, IEventAggregator eventAggregator, ILogger<AlertService> logger) Parameters Type Name Description Microsoft.Extensions.Options.IOptions < AlertOptions > options The options to use with the service. CG.Events.IEventAggregator eventAggregator The event aggregator to use for alerts. Microsoft.Extensions.Logging.ILogger < AlertService > logger The logger to use with the service. Methods Raise<TAlert>(Object[]) This method raises an alert. Declaration public virtual void Raise<TAlert>(params object[] args) where TAlert : AlertEventBase Parameters Type Name Description System.Object [] args The arguments for the alert. Type Parameters Name Description TAlert RaiseAsync<TAlert>(Object[]) This method raises an alert. Declaration public virtual async Task RaiseAsync<TAlert>(params object[] args) where TAlert : AlertEventBase Parameters Type Name Description System.Object [] args The arguments for the alert. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Type Parameters Name Description TAlert Implements IAlertService Extension Methods AlertServiceExtensions.Raise<TAlert>(IAlertService, String, String, String, Int32) AlertServiceExtensions.Raise<TAlert>(IAlertService, String, Exception, String, String, Int32) AlertServiceExtensions.RaiseAsync<TAlert>(IAlertService, String, String, String, Int32) AlertServiceExtensions.RaiseAsync<TAlert>(IAlertService, String, Exception, String, String, Int32)"
  },
  "api/CG.Alerts.AlertServiceExtensions.html": {
    "href": "api/CG.Alerts.AlertServiceExtensions.html",
    "title": "Class AlertServiceExtensions",
    "keywords": "Class AlertServiceExtensions This class contains extension methods related to the IAlertService type. Inheritance System.Object AlertServiceExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public static class AlertServiceExtensions Methods Raise<TAlert>(IAlertService, String, Exception, String, String, Int32) This method raises an alert event of type TAlert . Declaration public static void Raise<TAlert>(this IAlertService alert, string message, Exception ex, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) where TAlert : AlertEventBase Parameters Type Name Description IAlertService alert The alert service to use for the operation System.String message The message to use for the operation. System.Exception ex The exception to use for the operation. System.String memberName Not used - supplied by the compiler. System.String sourceFilePath Not used - supplied by the compiler. System.Int32 sourceLineNumber Not used supplied by the compiler. Type Parameters Name Description TAlert The type of alert to raise. Raise<TAlert>(IAlertService, String, String, String, Int32) This method raises an alert event of type TAlert . Declaration public static void Raise<TAlert>(this IAlertService alert, string message, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) where TAlert : AlertEventBase Parameters Type Name Description IAlertService alert The alert service to use for the operation System.String message The message to use for the operation. System.String memberName Not used - supplied by the compiler. System.String sourceFilePath Not used - supplied by the compiler. System.Int32 sourceLineNumber Not used supplied by the compiler. Type Parameters Name Description TAlert The type of alert to raise. RaiseAsync<TAlert>(IAlertService, String, Exception, String, String, Int32) This method raises an alert event of type TAlert . Declaration public static async Task RaiseAsync<TAlert>(this IAlertService alert, string message, Exception ex, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) where TAlert : AlertEventBase Parameters Type Name Description IAlertService alert The alert service to use for the operation System.String message The message to use for the operation. System.Exception ex The exception to use for the operation. System.String memberName Not used - supplied by the compiler. System.String sourceFilePath Not used - supplied by the compiler. System.Int32 sourceLineNumber Not used supplied by the compiler. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Type Parameters Name Description TAlert The type of alert to raise. RaiseAsync<TAlert>(IAlertService, String, String, String, Int32) This method raises an alert event of type TAlert . Declaration public static async Task RaiseAsync<TAlert>(this IAlertService alert, string message, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) where TAlert : AlertEventBase Parameters Type Name Description IAlertService alert The alert service to use for the operation System.String message The message to use for the operation. System.String memberName Not used - supplied by the compiler. System.String sourceFilePath Not used - supplied by the compiler. System.Int32 sourceLineNumber Not used supplied by the compiler. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Type Parameters Name Description TAlert The type of alert to raise."
  },
  "api/CG.Alerts.AuditAlert.html": {
    "href": "api/CG.Alerts.AuditAlert.html",
    "title": "Class AuditAlert",
    "keywords": "Class AuditAlert This class is a default handler for an audit alert event. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase AuditAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class AuditAlert : AlertEventBase Remarks This handler logs the alert, along with any passed arguments. To perform additional processing, derive from this class, override the OnInvoke(Object[]) method, and perform your processing there. Make sure to call the base method from your override, if you want to continue to log the event. To create a custom handler for audit alerts, simply derive from this class and override the OnInvoke(Object[]) method. After that, specify your class when registering, using the options delegate in the AddAlertServices(IServiceCollection, Action<AlertOptions>) method. Examples Here is an example of creating a custom audit alert handler: public class MyAuditHandler : AuditAlert { protected override void OnInvoke(params object[] args) { // TODO : write your code here. base.OnInvoke(args); } } Constructors AuditAlert(ILogger<AuditAlert>) This constructor creates a new instance of the AuditAlert class. Declaration public AuditAlert(ILogger<AuditAlert> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < AuditAlert > logger The logger to use with the alert. Fields _logger This field contains a reference to a logger. Declaration protected readonly ILogger<AuditAlert> _logger Field Value Type Description Microsoft.Extensions.Logging.ILogger < AuditAlert > Methods OnInvoke(Object[]) This method is overridden in order process incoming critical error alerts. Declaration protected override void OnInvoke(params object[] args) Parameters Type Name Description System.Object [] args Overrides CG.Events.Models.EventBase.OnInvoke(System.Object[])"
  },
  "api/CG.Alerts.CriticalErrorAlert.html": {
    "href": "api/CG.Alerts.CriticalErrorAlert.html",
    "title": "Class CriticalErrorAlert",
    "keywords": "Class CriticalErrorAlert This class is a default handler for a critical error alert event. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase CriticalErrorAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class CriticalErrorAlert : AlertEventBase Remarks This handler logs the alert, along with any passed arguments. To perform additional processing, derive from this class, override the OnInvoke(Object[]) method, and perform your processing there. Make sure to call the base method from your override, if you want to continue to log the event. To create a custom handler for critical error alerts, simply derive from this class and override the OnInvoke(Object[]) method. After that, specify your class when registering, using the options delegate in the AddAlertServices(IServiceCollection, Action<AlertOptions>) method. Examples Here is an example of creating a custom critical error alert handler: public class MyCriticalErrorHandler : CriticalErrorAlert { protected override void OnInvoke(params object[] args) { // TODO : write your code here. base.OnInvoke(args); } } Constructors CriticalErrorAlert(ILogger<CriticalErrorAlert>) This constructor creates a new instance of the CriticalErrorAlert class. Declaration public CriticalErrorAlert(ILogger<CriticalErrorAlert> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < CriticalErrorAlert > logger The logger to use with the alert. Fields _logger This field contains a reference to a logger. Declaration protected readonly ILogger<CriticalErrorAlert> _logger Field Value Type Description Microsoft.Extensions.Logging.ILogger < CriticalErrorAlert > Methods OnInvoke(Object[]) This method is overridden in order process incoming critical error alerts. Declaration protected override void OnInvoke(params object[] args) Parameters Type Name Description System.Object [] args Overrides CG.Events.Models.EventBase.OnInvoke(System.Object[])"
  },
  "api/CG.Alerts.ErrorAlert.html": {
    "href": "api/CG.Alerts.ErrorAlert.html",
    "title": "Class ErrorAlert",
    "keywords": "Class ErrorAlert This class is a default handler for an error alert event. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase ErrorAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class ErrorAlert : AlertEventBase Remarks This handler logs the alert, along with any passed arguments. To perform additional processing, derive from this class, override the OnInvoke(Object[]) method, and perform your processing there. Make sure to call the base method from your override, if you want to continue to log the event. To create a custom handler for error alerts, simply derive from this class and override the OnInvoke(Object[]) method. After that, specify your class when registering, using the options delegate in the AddAlertServices(IServiceCollection, Action<AlertOptions>) method. Examples Here is an example of creating a custom error alert handler: public class MyErrorHandler : ErrorAlert { protected override void OnInvoke(params object[] args) { // TODO : write your code here. base.OnInvoke(args); } } Constructors ErrorAlert(ILogger<ErrorAlert>) This constructor creates a new instance of the ErrorAlert class. Declaration public ErrorAlert(ILogger<ErrorAlert> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < ErrorAlert > logger The logger to use with the alert. Fields _logger This field contains a reference to a logger. Declaration protected readonly ILogger<ErrorAlert> _logger Field Value Type Description Microsoft.Extensions.Logging.ILogger < ErrorAlert > Methods OnInvoke(Object[]) This method is overridden in order process incoming error alerts. Declaration protected override void OnInvoke(params object[] args) Parameters Type Name Description System.Object [] args Overrides CG.Events.Models.EventBase.OnInvoke(System.Object[])"
  },
  "api/CG.Alerts.html": {
    "href": "api/CG.Alerts.html",
    "title": "Namespace CG.Alerts",
    "keywords": "Namespace CG.Alerts Classes AlertEventBase This class is a base for all alert type events. AlertOptions This class contains options for the IAlertService service. AlertService This class is a default implementation of the IAlertService interface. AlertServiceExtensions This class contains extension methods related to the IAlertService type. AuditAlert This class is a default handler for an audit alert event. CriticalErrorAlert This class is a default handler for a critical error alert event. ErrorAlert This class is a default handler for an error alert event. InformationAlert This class is a default handler for an information alert event. WarningAlert This class is a default handler for an warning alert event. Interfaces IAlertService This interface represents an object that raises alerts."
  },
  "api/CG.Alerts.IAlertService.html": {
    "href": "api/CG.Alerts.IAlertService.html",
    "title": "Interface IAlertService",
    "keywords": "Interface IAlertService This interface represents an object that raises alerts. Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public interface IAlertService Remarks This service internally manages a set of 'standard alerts' that come in handy for general applications. Those alerts are: Methods Raise<TEvent>(Object[]) This method raises an alert. Declaration void Raise<TEvent>(params object[] args) where TEvent : AlertEventBase Parameters Type Name Description System.Object [] args The arguments for the alert. Type Parameters Name Description TEvent The type of alert to raise. RaiseAsync<TEvent>(Object[]) This method raises an alert. Declaration Task RaiseAsync<TEvent>(params object[] args) where TEvent : AlertEventBase Parameters Type Name Description System.Object [] args The arguments for the alert. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Type Parameters Name Description TEvent The type of alert to raise. Extension Methods AlertServiceExtensions.Raise<TAlert>(IAlertService, String, String, String, Int32) AlertServiceExtensions.Raise<TAlert>(IAlertService, String, Exception, String, String, Int32) AlertServiceExtensions.RaiseAsync<TAlert>(IAlertService, String, String, String, Int32) AlertServiceExtensions.RaiseAsync<TAlert>(IAlertService, String, Exception, String, String, Int32)"
  },
  "api/CG.Alerts.InformationAlert.html": {
    "href": "api/CG.Alerts.InformationAlert.html",
    "title": "Class InformationAlert",
    "keywords": "Class InformationAlert This class is a default handler for an information alert event. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase InformationAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class InformationAlert : AlertEventBase Remarks This handler logs the alert, along with any passed arguments. To perform additional processing, derive from this class, override the OnInvoke(Object[]) method, and perform your processing there. Make sure to call the base method from your override, if you want to continue to log the event. To create a custom handler for information alerts, simply derive from this class and override the OnInvoke(Object[]) method. After that, specify your class when registering, using the options delegate in the AddAlertServices(IServiceCollection, Action<AlertOptions>) method. Examples Here is an example of creating a custom information alert handler: public class MyInformationHandler : InformationAlert { protected override void OnInvoke(params object[] args) { // TODO : write your code here. base.OnInvoke(args); } } Constructors InformationAlert(ILogger<InformationAlert>) This constructor creates a new instance of the InformationAlert class. Declaration public InformationAlert(ILogger<InformationAlert> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < InformationAlert > logger The logger to use with the alert. Fields _logger This field contains a reference to a logger. Declaration protected readonly ILogger<InformationAlert> _logger Field Value Type Description Microsoft.Extensions.Logging.ILogger < InformationAlert > Methods OnInvoke(Object[]) This method is overridden in order process incoming information alerts. Declaration protected override void OnInvoke(params object[] args) Parameters Type Name Description System.Object [] args Overrides CG.Events.Models.EventBase.OnInvoke(System.Object[])"
  },
  "api/CG.Alerts.WarningAlert.html": {
    "href": "api/CG.Alerts.WarningAlert.html",
    "title": "Class WarningAlert",
    "keywords": "Class WarningAlert This class is a default handler for an warning alert event. Inheritance System.Object CG.Events.Models.EventBase AlertEventBase WarningAlert Inherited Members CG.Events.Models.EventBase._subscriptions CG.Events.Models.EventBase._sync CG.Events.Models.EventBase.Publish(System.Object[]) CG.Events.Models.EventBase.PublishAsync(System.Object[]) CG.Events.Models.EventBase.Subscribe(System.Action<System.Object[]>, System.Boolean) CG.Events.Models.EventBase.Subscribe(System.Boolean) CG.Events.Models.EventBase.Unsubscribe(System.IDisposable) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Alerts Assembly : CG.Alerts.dll Syntax public class WarningAlert : AlertEventBase Remarks This handler logs the alert, along with any passed arguments. To perform additional processing, derive from this class, override the OnInvoke(Object[]) method, and perform your processing there. Make sure to call the base method from your override, if you want to continue to log the event. To create a custom handler for warning alerts, simply derive from this class and override the OnInvoke(Object[]) method. After that, specify your class when registering, using the options delegate in the AddAlertServices(IServiceCollection, Action<AlertOptions>) method. Examples Here is an example of creating a custom warning alert handler: public class MyWarningHandler : WarningAlert { protected override void OnInvoke(params object[] args) { // TODO : write your code here. base.OnInvoke(args); } } Constructors WarningAlert(ILogger<WarningAlert>) This constructor creates a new instance of the WarningAlert class. Declaration public WarningAlert(ILogger<WarningAlert> logger) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger < WarningAlert > logger The logger to use with the alert. Fields _logger This field contains a reference to a logger. Declaration protected readonly ILogger<WarningAlert> _logger Field Value Type Description Microsoft.Extensions.Logging.ILogger < WarningAlert > Methods OnInvoke(Object[]) This method is overridden in order process incoming warning alerts. Declaration protected override void OnInvoke(params object[] args) Parameters Type Name Description System.Object [] args Overrides CG.Events.Models.EventBase.OnInvoke(System.Object[])"
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Alerts.dll Syntax public static class ApplicationBuilderExtensions Methods UseAlertServices(IApplicationBuilder, IWebHostEnvironment) This method performs any startup logic required to suport alerts. Declaration public static IApplicationBuilder UseAlertServices(this IApplicationBuilder applicationBuilder, IWebHostEnvironment webHostEnvironment) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment webHostEnvironment The host environment to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder the value of the applicationBuilder parameter, for chaining calls together."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Alerts.dll Syntax public static class ServiceCollectionExtensions Methods AddAlertServices(IServiceCollection, Action<AlertOptions>) This method registers types and services required to support alerts. Declaration public static IServiceCollection AddAlertServices(this IServiceCollection serviceCollection, Action<AlertOptions> optionsDelegate = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. System.Action < AlertOptions > optionsDelegate The optional delegate to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection the value of the serviceCollection parameter, for chaining calls together. Examples Here is an example of using the options delegate to specify one or more custom handler types for the 'standard alerts' that are handled by the IAlertService service: public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddAlertServices(options => { options.SetInformationAlertType{MyInformationAlert}(); }); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseAlertServices(env); } }"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Alerts.dll contains alert extensions used by other CodeGator packages."
  }
}